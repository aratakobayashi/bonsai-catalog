import { NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'

export async function GET() {
  try {
    console.log('üîç ÂïÜÂìÅ„Éá„Éº„Çø„Éô„Éº„Çπ„Éá„Éê„ÉÉ„Ç∞ÈñãÂßã...')
    
    // ÂïÜÂìÅÁ∑èÊï∞„ÇíÁ¢∫Ë™ç
    const { count, error: countError } = await supabase
      .from('products')
      .select('*', { count: 'exact', head: true })

    if (countError) {
      console.error('‚ùå „Ç´„Ç¶„É≥„Éà„Ç®„É©„Éº:', countError)
      return NextResponse.json({
        success: false,
        error: 'Count query failed',
        details: countError
      })
    }

    console.log(`üìä Á∑èÂïÜÂìÅÊï∞: ${count}`)

    // ÂÆüÈöõ„ÅÆÂïÜÂìÅ„Éá„Éº„Çø„ÇíÂèñÂæó
    const { data: products, error: dataError } = await supabase
      .from('products')
      .select('id, name, category, price, status')
      .limit(10)

    if (dataError) {
      console.error('‚ùå „Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', dataError)
      return NextResponse.json({
        success: false,
        error: 'Data query failed',
        details: dataError
      })
    }

    // „ÉÜ„Éº„Éñ„É´Â≠òÂú®Á¢∫Ë™ç
    const { data: tables, error: tablesError } = await supabase
      .rpc('get_tables')
      .catch(() => null)

    return NextResponse.json({
      success: true,
      timestamp: new Date().toISOString(),
      productCount: count,
      sampleProducts: products,
      supabaseConfig: {
        url: process.env.NEXT_PUBLIC_SUPABASE_URL ? 'Set' : 'Missing',
        anonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? 'Set' : 'Missing'
      },
      debugInfo: {
        nodeEnv: process.env.NODE_ENV,
        hasProducts: products && products.length > 0,
        tablesCheckResult: tables || tablesError?.message || 'Not available'
      }
    })

  } catch (error) {
    console.error('‚ùå ÂÖ®Ëà¨„Ç®„É©„Éº:', error)
    return NextResponse.json({
      success: false,
      error: 'General error',
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 })
  }
}
#!/usr/bin/env tsx

async function testProductionURLs() {
  try {
    console.log('🌐 Testing actual production URLs for category filtering...\n')

    const baseUrl = 'https://bonsai-catalog.vercel.app'
    const testCategories = [
      { slug: 'beginner', name: 'はじめての盆栽' },
      { slug: 'basic-care', name: '基本のお手入れ' },
      { slug: 'species', name: '樹種別ガイド' }
    ]

    for (const category of testCategories) {
      console.log(`🧪 Testing category: ${category.name} (${category.slug})`)

      // Test the exact URL that would be generated by the frontend
      const testUrl = `${baseUrl}/guides?category=${category.slug}`
      console.log(`📍 URL: ${testUrl}`)

      const startTime = Date.now()

      try {
        const response = await fetch(testUrl)
        const endTime = Date.now()
        const duration = endTime - startTime

        if (response.ok) {
          const html = await response.text()

          // Check for key indicators
          const hasNoResults = html.includes('0件の記事が見つかりました')
          const hasResults = html.match(/(\d+)件の記事が見つかりました/)
          const articleCount = hasResults ? hasResults[1] : '0'

          // Check for specific article titles we know should exist
          const hasBeginnersGuide = html.includes('初心者向け盆栽の始め方')
          const hasAnyArticleCard = html.includes('article-card') || html.includes('記事')

          console.log(`  ✅ Status: ${response.status}`)
          console.log(`  ⏱️  Response time: ${duration}ms`)
          console.log(`  📊 Articles shown: ${articleCount}`)
          console.log(`  📄 Has article content: ${hasAnyArticleCard ? 'YES' : 'NO'}`)
          console.log(`  🔍 Contains known article: ${hasBeginnersGuide ? 'YES' : 'NO'}`)

          if (hasNoResults) {
            console.log(`  ❌ PROBLEM: Shows 0 results`)
          } else if (parseInt(articleCount) > 0) {
            console.log(`  ✅ SUCCESS: Shows ${articleCount} articles`)
          }

        } else {
          console.log(`  ❌ HTTP Error: ${response.status}`)
        }

      } catch (error) {
        console.log(`  ❌ Network Error: ${error}`)
      }

      console.log('')
      await new Promise(resolve => setTimeout(resolve, 1000))
    }

    // Test main guides page without filter
    console.log('🏠 Testing main guides page (no filter)...')
    const mainUrl = `${baseUrl}/guides`
    console.log(`📍 URL: ${mainUrl}`)

    try {
      const response = await fetch(mainUrl)

      if (response.ok) {
        const html = await response.text()
        const hasResults = html.match(/(\d+)件の記事が見つかりました/)
        const totalCount = hasResults ? hasResults[1] : '0'

        console.log(`  ✅ Total articles on main page: ${totalCount}`)
      }
    } catch (error) {
      console.log(`  ❌ Error: ${error}`)
    }

    console.log('\n🎯 Production URL test completed!')

  } catch (error) {
    console.error('❌ Production URL test failed:', error)
  }
}

// Run test
testProductionURLs()